+ Регулярные выражения
+
= brown
echo "Диапазон символов"
= default
+
_ "- совпадает с любой одной цифрой" "[0123456789]"
_ "- совпадает с любой буквой от a до d" "[a-d]"
+
= magenta
long Внимание! Это справедливо для локали C. Многие локали сортируют символы в словарном порядке, и в этих локалях [a-d] может быть, к примеру, \
эквивалентом [aBbCcDd]. Для получения традиционной интерпретации выражения установите LC_ALL в значение C.
= default
+
= brown
echo "Классы символов" 
= default
_ "- класс символов из чисел и букв в текущей локали" "[:alnum:]"

_ "- алфавитные символы:" "[:alpha:]"
_ "- в локали C и кодировке символов ASCII аналогично" "[a-zA-Z]"
_ "- цифры"  "[:digit:]"  
_ "- аналогично" "[0-9]"
_ "- алфавитные символы в нижнем и верхнем регистрах" "[:lower:][:upper:]"
_ "- в локали C и кодировке символов ASCII, аналогично" "[A-Za-z]"

_ "- пустые символы: пробел и табуляция" "[:blank:]"
_ "- управляющие символы" "[:cntrl:]"
+
long 'Внимание! Управляющие символы. В ASCII эти символы имеют восьмеричные коды от 000 до 037 и 177 (DEL). 
В других наборах символов это эквивалентные символы, если они есть.'
+

_ "- графические символы ([:alnum:], [:punct:])" "[:graph:]"

_ "- печатные символы ([:alnum:], [:punct:] и пробел)" "[:print:]"

_ "- пунктуационные символы" "[:punct:]"

#long 'в локали C и кодировке символов ASCII, это ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~.'

_ "- пробельные символы (табуляция, новая строка, вертикальная табуляция, разрыв страницы, возврат каретки и пробел)" "[:space:]"


_ "- шестнадцатеричные цифры (0 1 2 3 4 5 6 7 8 9 A B C D E F a b c d e f)" "[:xdigit:]"
+
long Обратите внимание, что квадратные скобки в этих классах имён являются частью символических имён и должны быть включены в дополнение к квадратным скобкам, \
отделяющим выражения в квадратных скобках.
+
long 'Большинство метасимволов теряют своё специальное значение внутри выражений в квадратных скобках. Для включения буквального ']' разместите его первым в списке.
Аналогично литерал ^ разместите где угодно, но только не первым. Наконец, для включения литерала разместите его последним.'
+
mark_color=magenta
REV_COLUMNS=yes
separ=.
_ "если не является первым пунктом, завершает выражение в квадратных скобках. Поэтому если вы хотите сделать символ ']' элементом списка, вы должны поставить его в начало." ']' 

_ "обозначает открывающий символ сортировки" '[' 

_ "обозначает закрывающий символ сортировки" ']' 

_ "представляет открытие класса эквивалентности" '[=' 

_ "представляет закрытие класса эквивалентности" '=]' 
_ "представляет открывающий символ класса символов, за ним должно следовать действительное имя класса символов." '[:' 

_ "представляет закрывающий символ класса символов." ':]' 

_ "представляет диапазон, если не является первым или последним в списке или конечной точкой диапазона." '-'

_ 'представляет не включаемые в список символы. Если вы хотите сделать символ ^ элементом списка, разместите его где угодно, кроме первой позиции.' '^'
+
= brown
echo  Анкоры
= default
+
_ "начало строки" '^' 
_ "конец строки" '$'  

+
= brown
echo Символы с обратным слешем и специальные выражения
= default
+
long 'Символ "\", когда за ним следуют определённые обычные символы, принимает специальное значение:'

_ "oбозначает край слова" '\b' 
_ "oбозначает не край слова" '\B'
_ "oбозначает начало слова" '\<' 
_ "oбозначает конец слова" '\>' 
_ "oбозначает главные составные символы, это синоним для [_[:alnum:]]" '\w' 
_ "oбозначает не главные составные символы, это синоним для [^_[:alnum:]]" '\W' 
_ "oбозначает белые пробелы, это синоним для [[:space:]]" '\s' 
_ "oбозначает не белые пробелы, это синоним для [^[:space:]]" '\S' 

+
= brown
echo Повторения
= default
+
long За регулярным выражением может следовать один или несколько операторов повторения:

_ "предыдущий элемент опциональный (встречается ноль или один раз)" '?' 
_ "предыдущий элемент встречается ноль или более раз" '*' 
_ "предыдущий элемент встречается один или более раз" '+' 
_ "предыдущий элемент встречается ровно n раз" '{n}' 
_ "предыдущий элемент встречается n или более раз" '{n,}' 
_ "предыдущий элемент встречается не более m раз" '{,m}' 
_ "предыдущий элемент встречается по крайней мере n раз, но не более чем m раз" '{n,m}' 
+
= brown
long Объединение регулярных выражений
= default
+
long Два регулярных выражения могут быть объединены, результирующее регулярное выражение соответствует любой строке, \
сформированной объединением двух подстрок, каждая из которых соответствует двум объединённым выражениям.
+
= brown
long Альтернативы в регулярных выражениях
= default
+
long Два регулярных выражения могут быть объединены оператором '|' \
Результирующее регулярное выражение совпадает с любой строкой, соответствующей одному из альтернативных выражений.
+
= brown
echo Приоритет
= default
+
long Повторение имеет приоритет над объединением, которое, в свою очередь, имеет приоритет над альтернативой. \
Целое регулярное выражение может быть заключено в круглые скобки для перезаписи этих правил приоритетов и \
формирования подвыражения.
+
= brown
long Обратные ссылки и Подвыражения
= default
+
long 'Обратная ссылка \n, где n — это одна цифра, соответствует подстроке, совпавшей ранее с n-ным подвыражением
регулярного выражения, заключённым в круглые скобки. Например, «(a)\1» соответствует «aa».
Когда используется альтернатива, если группа не принимает участие в совпадении, обратная ссылка делает всё совпадение неудавшимся.
Например, "a(.)|b\1" не будет соответствовать "ba". Когда с опцией -e или из файла (-f file) дано несколько регулярных выражений,
обратная ссылка является локальной для каждого выражения.'
